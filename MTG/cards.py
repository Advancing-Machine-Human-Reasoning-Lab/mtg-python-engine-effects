import sys
import pickle
import math
import re

from MTG.parsedcards import *
from MTG.exceptions import *
from MTG import abilities
from MTG import zone
from MTG import triggers
from MTG import mana


SETPREFIX = ['M15', 'sm_set']
name_to_id_dict = {}
id_to_name_dict = {}

# compile all the dictionaries from different parsed sets
for pre in SETPREFIX:
    try:
        with open('data/%s_name_to_id_dict.pkl' % pre, 'rb') as f:
            name_to_id_dict.update(pickle.load(f))
    except:
        print("%s name_to_id_dict not found\n" % pre)

    try:
        with open('data/%s_id_to_name_dict.pkl' % pre, 'rb') as f:
            id_to_name_dict.update(pickle.load(f))
    except:
        print("%s id_to_name_dict not found\n" % pre)


def id_to_name(ID):
    return id_to_name_dict.get(ID, None)


def name_to_id(name):
    return name_to_id_dict.get(name, None)


def str_to_class(str):
    return getattr(sys.modules[__name__], str)


def card_from_name(name, get_instance=True):
    ID = name_to_id(name)
    if ID is not None:
        if get_instance:  # gets instance of class
            # default card class generated by parse_cards.py
            return str_to_class(ID)()
        else:
            return str_to_class(ID)
    else:
        return None


def read_deck(filename):
    """File format:
    NUM CARDNAME

    e.g.
    10 Plains
    10 Oreskos Swiftclaw

    """
    with open(filename, 'r') as f:
        file = f.read().split("\n")
        deck = []
        for line in file:
            try:
                i = line.index(" ")
                num = int(line[:i])
                for j in range(num):  # add NUM copies of CARDNAME
                    card = card_from_name(line[i + 1:])
                    if card:
                        deck.append(card)
                        # print(deck[-1].name)
                    else:
                        pass
                        # print("card {} does not exist\n".format(line[i+1:]))
            except:
                raise DecklistFormatException

    return deck


def add_activated_ability(cardname, cost, effect, is_mana_ability=False):
    if not name_to_id(cardname):
        return
    card = card_from_name(cardname, get_instance=False)

    _costs = cost.split(', ')
    costs = []
    # costs_validation = "True"
    if 'T' in _costs:
        costs.append("self.tap() and not self.is_summoning_sick")
        # costs_validation += " and not self.status.tapped"  ## todo: make this check if costs return True

    for itm in _costs:
        if mana.mana_pattern.match(itm):
            costs.append("self.controller.pay('%s')" % itm)

        if re.match('[pP]ay [\dX]+ life', itm):
            costs.append("self.controller.pay(life=%s)" %
                         re.search('[\dX]+', itm).group(0))

    # elif other costs

    costs = " and ".join(costs)

    if not card.activated_abilities:  # hasn't been initiated yet
        card.activated_abilities = []
        card._activated_abilities_costs = []
        card._activated_abilities_effects = []
        # card._activated_abilities_costs_validation = []

    card.activated_abilities.append((costs, effect, is_mana_ability))

    card._activated_abilities_costs.append(lambda self: eval(costs))
    # card._activated_abilities_costs_validation.append(
    #     lambda self: eval(costs_validation))
    card._activated_abilities_effects.append(lambda self: exec(effect))


def add_targets(cardname, criterias=[lambda self, p: True], prompts=["Choose a target\n"]):
    if not name_to_id(cardname):
        return
    card = card_from_name(cardname, get_instance=False)

    if criterias == 'creature':
        criterias = [lambda self, p: p.zone.zone_type == zone.ZoneType.BATTLEFIELD
                             and p.is_creature]
    if criterias == 'opponent':
        criterias = [lambda self, p: p.__class__.__name__ == 'Player' and p != self]

    if criterias == 'player':
        criterias = [lambda self, p: p.__class__.__name__ == 'Player']

    if criterias == 'creature or player':
        criterias = [lambda self, p: p.__class__.__name__ == 'Player'
                     or (p.is_creature and p.zone.zone_type == zone.ZoneType.BATTLEFIELD)]


    card.target_criterias = criterias
    card.target_prompts = prompts


def add_play_func_with_targets(cardname, outcome=lambda self, t, l: True):
    if not name_to_id(cardname):
        return
    card = card_from_name(cardname, get_instance=False)

    def play_func(self):
        legality = [c(self, t) for c, t in zip(self.target_criterias, self.targets_chosen)]
        if any(legality):
            outcome(self, self.targets_chosen, legality)

        self.controller.graveyard.add(self)

    card.play_func = play_func


def add_play_func_no_target(cardname, outcome=lambda self: True):
    if not name_to_id(cardname):
        return
    card = card_from_name(cardname, get_instance=False)

    card.play_func = outcome


def add_trigger(cardname, condition, effect, requirements=lambda self: True):
    """
    Each effect is a function of the form
        lambda self: do_something

    It will be passed into the stack as
        play.Play(lambda: effect(self))

    where self is the source of the trigger (the permanent)
    """
    if not name_to_id(cardname):
        return
    card = card_from_name(cardname, get_instance=False)

    # make it a variable specific to card rather than a card.Card class var
    # normally, trigger_listeners is defined in card.Card,
    # and our parsed card classes just inherit that
    if card.trigger_listeners == {}:
        card.trigger_listeners = {}

    if condition not in card.trigger_listeners:
        card.trigger_listeners[condition] = []

    # each element in the dict is a list of triggers, since there could be multiple abilities
    # that trigger from the same effect, e.g. tap AND draw a card on etb
    # each of them will go into a separate play.Play object and be put onto the stack
    card.trigger_listeners[condition].append((effect, requirements))


def set_up_cards():
    add_activated_ability(
        "Plains", 'T', 'self.controller.mana.add(mana.Mana.WHITE, 1)', True)
    add_activated_ability(
        "Island", 'T', 'self.controller.mana.add(mana.Mana.BLUE, 1)', True)
    add_activated_ability(
        "Swamp", 'T', 'self.controller.mana.add(mana.Mana.BLACK, 1)', True)
    add_activated_ability(
        "Mountain", 'T', 'self.controller.mana.add(mana.Mana.RED, 1)', True)
    add_activated_ability(
        "Forest", 'T', 'self.controller.mana.add(mana.Mana.GREEN, 1)', True)
    # add_activated_ability(
    #    "Wastes", 'T', 'self.controller.mana.add(mana.Mana.COLORLESS, 1)', True)

    add_targets("Lightning Bolt", 'creature or player')
    add_play_func_with_targets("Lightning Bolt",
                                lambda self, t, l: t[0].take_damage(self, 3))

    add_targets("Lightning Strike", 'creature or player')
    add_play_func_with_targets("Lightning Strike",
                                lambda self, t, l: t[0].take_damage(self, 3))

    add_targets("Congregate", 'player')
    add_play_func_with_targets("Congregate",
                                lambda self, t, l: t[0].gain_life(
                                    2 * len([p for plyr in self.controller.game.players_list
                                             for p in plyr.battlefield
                                             if p.is_creature])))

    add_play_func_no_target("Mass Calcify", lambda self:
                            self.game.apply_to_battlefield(
                                lambda p: p.dies(),
                                lambda p: p.is_creature and not p.has_color('W')))

    add_trigger("Ajani's Pridemate", triggers.triggerConditions.onControllerLifeGain,
                lambda self: self.add_counter("+1/+1")
                if self.controller.make_choice(
                    "Would you like to put a +1/+1 counter on %r?" % self)
                else None)

    add_trigger("Tireless Missionaries", triggers.triggerConditions.onEtB,
                lambda self: self.controller.gain_life(3))

    add_activated_ability(
        "Soulmender", 'T', 'self.controller.gain_life(1)')

    add_targets("Solemn Offerings", [lambda self, p: p.zone.zone_type == zone.ZoneType.BATTLEFIELD
                                     and (p.is_artifact or p.is_enchantment)])
    add_play_func_with_targets("Solemn Offerings",
                                lambda self, t, l: t[0].destroy()
                                and self.controller.gain_life(4))

    add_play_func_no_target("Divination", lambda self: self.controller.draw(2))

    add_play_func_no_target(
        "Jace's Ingenuity", lambda self: self.controller.draw(3))

    add_targets("Titanic Growth", 'creature')
    # add_play_func_with_targets("Titanic Growth",
    #                             lambda self, t, l: t[0].modifier.add([
    #                                 ('characteristics.power', 4, True),
    #                                 ('characteristics.toughness', 4, True)]))
    add_play_func_with_targets("Titanic Growth",
                                lambda self, t, l: t[0].add_effect('modifyPT',
                                                             (4, 4), self, self.game.eot_time))

    add_targets("Ulcerate", 'creature')
    add_play_func_with_targets("Ulcerate",
                                lambda self, t, l:
                                    t[0].add_effect('modifyPT', (-3, -3),
                                                 self, self.game.eot_time)
                                and self.controller.lose_life(3))

    add_activated_ability(
        "Zof Shade", '2B',
        "self.add_effect('modifyPT', (2, 2), self, self.game.eot_time)")

    add_targets("Mind Rot", [lambda self, p: p.__class__.__name__ is 'player'])
    add_play_func_with_targets("Mind Rot",
                                lambda self, t, l:
                                    t[0].discard(2))

    add_activated_ability(
        "Shadowcloak Vampire", 'Pay 2 life',
        "self.add_effect('gainAbility', 'Flying', self, self.game.eot_time)")

    add_trigger(
        "First Response", triggers.triggerConditions.onUpkeep,
        lambda self: self.controller.create_token('1/1 white Soldier'),
        lambda self: self.controller.last_turn_events['life loss'])

    add_play_func_no_target(
        "Raise the Alarm",
        lambda self: self.controller.create_token('1/1 white Soldier', 2))

    add_trigger(
        "Resolute Archangel", triggers.triggerConditions.onEtB,
        lambda self: self.controller.set_life_total(
                        self.controller.startingLife),
        lambda self: self.controller.life < self.controller.startingLife)

    add_play_func_no_target(
        "Sanctified Charge", lambda self:
            ([c.add_effect('modifyPT', (2, 1), self, self.game.eot_time)
                for c in self.controller.battlefield if c.is_creature]
         and [c.add_effect('gainAbility', 'First Strike', self, self.game.eot_time)
                for c in self.controller.battlefield if c.is_creature and c.has_color('W')]
            )
        )

    # NEED ZONE SHIFT HELPER FUNC

    add_play_func_no_target(
        "Aetherspouts", lambda self:
            self.game.apply_to_battlefield(
                lambda p: p.change_zone(p.owner.library, 0, False)
                            if p.owner.make_choice(
                                "Would you like to put %r on top of your library?"
                                " (otherwise it goes on bottom)" % p)
                            else p.change_zone(p.owner.library, -1, False),
                lambda p: p.status.is_attacking)
        )


    add_targets("Devouring Light", [lambda self, p: p.zone.zone_type == zone.ZoneType.BATTLEFIELD
                             and (p.is_creature and p.in_combat)])
    add_play_func_with_targets("Devouring Light",
                                lambda self, t, l:
                                    t[0].exile())

    add_play_func_no_target(
        "Triplicate Spirits",
        lambda self: self.controller.create_token('1/1 white Spirit', 3, 'Flying'))

    add_play_func_no_target(
        "Meditation Puzzle",
        lambda self: self.controller.gain_life(8))

    add_targets("Pillar of Light", [lambda self, p: p.zone.zone_type == zone.ZoneType.BATTLEFIELD
                             and (p.is_creature and p.toughness >= 4)])
    add_play_func_with_targets("Pillar of Light",
                                lambda self, t, l:
                                    t[0].exile())

    add_targets("Chronostutter", 'creature')
    add_play_func_with_targets("Chronostutter",
                                lambda self, t, l:
                                    t[0].change_zone(t[0].owner.library, 1, False))

    add_trigger("Coral Barrier", triggers.triggerConditions.onEtB,
            lambda self: self.controller.create_token('1/1 blue Squid', 1, 'Islandwalk'))

    add_targets("Hydrosurge", 'creature')
    add_play_func_with_targets("Hydrosurge",
                                lambda self, t, l: t[0].add_effect('modifyPT',
                                                             (-5, 0), self, self.game.eot_time))

    add_targets("Mind Sculpt", 'opponent')
    add_play_func_with_targets("Mind Sculpt",
                                lambda self, t, l: t[0].mill(7))


    add_targets("Peel from Reality", [lambda self, p: p.zone.zone_type == zone.ZoneType.BATTLEFIELD
                             and p.is_creature and p.controller is self.controller,
                                      lambda self, p: p.zone.zone_type == zone.ZoneType.BATTLEFIELD
                             and p.is_creature and p.controller is not self.controller],
                                     ['Choose target creature you control\n',
                                      "Choose target creature you don't control\n"])
    add_play_func_with_targets("Peel from Reality",
                                lambda self, t, l: [t[i].bounce() for i in range(2) if l[i]])