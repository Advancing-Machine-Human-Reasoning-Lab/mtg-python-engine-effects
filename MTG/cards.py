from MTG.card import *
from MTG.parsed_cards import *
from MTG.mana import *
import sys

def id_to_name(ID):
    return id_to_name_dict.get(ID, None)

def name_to_id(name):
    return name_to_id_dict.get(name, None)

def str_to_class(str):
    return reduce(getattr, str.split("."), sys.modules[__name__])

def card_from_name(name, get_instance=True):
    ID = name_to_id(name)
    if ID is not None:
        if get_instance:  # gets instance of class
            return eval(ID)()  # default card class generated by parse_cards.py
        else:
            return eval(ID)
    else:
        return None


def make_activated_ability(cardname, cost, effect, is_mana_ability=False):
    card = eval(name_to_id(cardname))

    _costs = cost.split(', ')
    costs = ""
    costs_validation = "True"
    if 'T' in _costs:
        costs += "self.tap();"
        costs_validation += " and not self.status.tapped"
    # elif MANA


    card.activated_abilities.append((costs, effect, is_mana_ability))

    card._activated_abilities_costs.append(lambda self: exec(costs))
    card._activated_abilities_costs_validation.append(lambda self: eval(costs_validation))
    card._activated_abilities_effects.append(lambda self: exec(effect))


make_activated_ability("Plains", 'T', 'self.controller.mana.add(Mana.WHITE, 1)', True)
make_activated_ability("Island", 'T', 'self.controller.mana.add(Mana.BLUE, 1)', True)