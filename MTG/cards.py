import sys

from MTG import card
from MTG import cardtype
from MTG import abilities
from MTG.parsedcards import *


def id_to_name(ID):
    return id_to_name_dict.get(ID, None)

def name_to_id(name):
    return name_to_id_dict.get(name, None)

def str_to_class(str):
    return getattr(sys.modules[__name__], str)

def card_from_name(name, get_instance=True):
    ID = name_to_id(name)
    if ID is not None:
        if get_instance:  # gets instance of class
            return str_to_class(ID)()  # default card class generated by parse_cards.py
        else:
            return str_to_class(ID)
    else:
        return None

def read_deck(filename):
    """ File format:
    NUM CARDNAME

    e.g.
    10 Plains
    10 Oreskos Swiftclaw

    """
    f = open(filename, 'r')
    file = f.read().split("\n")
    deck = []
    for line in file:
        try:
            i = line.index(" ")
            num = int(line[:i])
            for j in range(num):  # add NUM copies of CARDNAME
                card = card_from_name(line[i+1:])
                if card:
                    deck.append(card)
                    # print(deck[-1].name())
                else:
                    pass
                    # print("card {} does not exist\n".format(line[i+1:]))
        except:
            raise DecklistFormatError()
    f.close()
    return deck


def make_activated_ability(cardname, cost, effect, is_mana_ability=False):
    if not name_to_id(cardname):
        return
    card = card_from_name(cardname, get_instance=False)

    _costs = cost.split(', ')
    costs = ""
    costs_validation = "True"
    if 'T' in _costs:
        costs += "self.tap();"
        costs_validation += " and not self.status.tapped"
    # elif MANA


    card.activated_abilities.append((costs, effect, is_mana_ability))

    card._activated_abilities_costs.append(lambda self: exec(costs))
    card._activated_abilities_costs_validation.append(lambda self: eval(costs_validation))
    card._activated_abilities_effects.append(lambda self: exec(effect))


make_activated_ability("Plains", 'T', 'self.controller.mana.add(mana.Mana.WHITE, 1)', True)
make_activated_ability("Island", 'T', 'self.controller.mana.add(mana.Mana.BLUE, 1)', True)
make_activated_ability("Swamp", 'T', 'self.controller.mana.add(mana.Mana.BLACK, 1)', True)
make_activated_ability("Mountain", 'T', 'self.controller.mana.add(mana.Mana.RED, 1)', True)
make_activated_ability("Forest", 'T', 'self.controller.mana.add(mana.Mana.GREEN, 1)', True)
make_activated_ability("Wastes", 'T', 'self.controller.mana.add(mana.Mana.COLORLESS, 1)', True)